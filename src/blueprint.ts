/**
 * Various utilities to work with Blueprint internals and its generated files.
 *
 * @packageDocumentation
 */

import { Args } from "@ton/blueprint";
import {
  getCompilablesDirectory,
  COMPILE_END,
} from "@ton/blueprint/dist/compile/compile";
import { CompilerConfig } from "@ton/blueprint/dist/compile/CompilerConfig";
import { ConfigProject } from "@tact-lang/compiler";
import path from "path";

/**
 * Tact project info parsed from the Blueprint compilation wrapper.
 */
export type TactProjectInfo = {
  projectName: string;
  target: string;
  options?: ConfigProject["options"];
};

/**
 * Extracts the `CompilerConfig` from the given project name.
 *
 * XXX: Imported from blueprint, since the original function is private:
 *      https://github.com/ton-org/blueprint/issues/151
 */
async function getCompilerConfigForContract(
  name: string,
): Promise<CompilerConfig> {
  const compilablesDirectory = await getCompilablesDirectory();
  const mod = await import(path.join(compilablesDirectory, name + COMPILE_END));
  if (typeof mod.compile !== "object") {
    throw new Error(`Object 'compile' is missing`);
  }
  return mod.compile;
}

/**
 * Extracts an information from the TypeScript wrapper file generated by Blueprint.
 */
export async function extractProjectInfo(
  blueprintCompilePath: string,
): Promise<TactProjectInfo> | never {
  const filePath = path.resolve(__dirname, blueprintCompilePath);
  const projectName = path.basename(filePath).replace(".compile.ts", "");
  const compilerConfig = await getCompilerConfigForContract(projectName);
  switch (compilerConfig.lang) {
    case "func":
      throw new Error(
        "FunC projects are not currently supported: https://github.com/nowarp/misti/issues/56",
      );
    case "tact":
      return {
        projectName,
        target: compilerConfig.target,
        options: compilerConfig.options,
      };
    default:
      // XXX: It might be *anything* according to the Blueprint API
      throw new Error(`Please specify \`lang\` property in ${filePath}`);
  }
}

/**
 * Converts Blueprint arguments to a list of strings.
 */
export function argsToStringList(args: Args): string[] {
  const argsList: string[] = args._;
  Object.entries(args).forEach(([key, value]) => {
    if (key !== "_" && value !== undefined) {
      if (typeof value === "boolean") {
        argsList.push(key);
      } else {
        argsList.push(key, value.toString());
      }
    }
  });
  return argsList;
}
